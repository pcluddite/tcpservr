<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
// ======
//
// Copyright (c) Timothy Baxendale. All Rights Reserved.
//
// ======
using System;
using Tbasic.Runtime;
using Tbasic.Types;

namespace Tbasic.Parsing
{
    public partial class DefaultScanner
    {
<# BuildSummary("BinaryOperator"); #>
        public bool NextBinaryOp(ObjectContext context, out BinaryOperator foundOp)
        {
            foundOp = default(BinaryOperator);
<# BuildNextOpBody("BinaryOperator"); #>
        }

<# BuildSummary("UnaryOperator"); #>
        /// <param name="last">the last token that was matched or null if there is no previous token</param>
        public bool NextUnaryOp(ObjectContext context, object last, out UnaryOperator foundOp)
        {
            foundOp = default(UnaryOperator);
            if (!(last == null || last is BinaryOperator)) // unary operators can really only come after a binary operator or the beginning of the expression
                return false;

<# BuildNextOpBody("UnaryOperator"); #>
        }
<# BuildMatchOp("BinaryOperator"); #>
<# BuildMatchOp("UnaryOperator"); #>
    }
}

<#+ private void BuildSummary(string opName) { #>
        /// <summary>
        /// Tries to match the next token in the buffer as a <#= opName #>
        /// </summary>
        /// <param name="context">the context that contains the operators</param>
        /// <param name="foundOp">contains the operator that was found</param>
        /// <returns>true if the token could be matched, false otherwise</returns>
<#+ } #>
<#+ private void BuildNextOpBody(string opName) { #>
            string token = BuffNextWord();
            if (string.IsNullOrEmpty(token))
                return false;

            if (Match<#= opName #>(token, context, out foundOp)) {
                AdvanceScanner(foundOp.OperatorString.Length);
                return true;
            }

            return false;
<#+ } #>
<#+ private void BuildMatchOp(string opName) { #>

        /// <summary>
        /// Tries to match a token as a <#= opName #>
        /// </summary>
        /// <param name="token">the token to match</param>
        /// <param name="context">the context that contains the operators</param>
        /// <param name="foundOp">contains the operator that was found</param>
        /// <returns>true if the token could be matched, false otherwise</returns>
        public static bool Match<#= opName #>(string token, ObjectContext context, out <#= opName #> foundOp)
        {
            string foundStr = string.Empty;
            foundOp = default(<#= opName #>);
            var ops = context.GetAll<#= opName #>s();
            for(int i = 0; i < ops.Count; ++i) {
                string opStr = ops[i].OperatorString;
                if (foundStr.Length < opStr.Length && token.StartsWith(opStr, StringComparison.OrdinalIgnoreCase)) {
                    foundOp = ops[i];
                    foundStr = opStr;
                }
            }
            return foundStr != string.Empty;
        }
<#+ } #>