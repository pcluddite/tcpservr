<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
// ======
//
// Copyright (c) Timothy Baxendale. All Rights Reserved.
//
// ======
using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using Tbasic.Types;

namespace Tbasic.Runtime
{
    /// <summary>
    /// Manages parameters and other data passed to a function or subroutine
    /// </summary>
    public partial class StackData : ICloneable
    {
<#
BuildAll("Number", " "); WriteLine("");
BuildAll("bool", " "); WriteLine("");
BuildAll("object", ""); WriteLine("");
BuildAll("Enum", "");
#>
    }
}
<#+
private void BuildAll(string typename, string cast = "")
{
    BuildAdd(typename, cast); WriteLine("");
    BuildAddRange(typename, cast); WriteLine("");
    BuildSet(typename, cast);
}

private void BuildAdd(string typename, string cast = "")
{
#>
        /// <summary>
        /// Adds a parameter to the end of the parameter list
        /// </summary>
        /// <param name="value">the <#= typename #> to add</param>
        public void Add(<#= typename #> value)
        {
            _params.Add(<#= cast #>value);
        }
<#+
}

private void BuildAddRange(string typename, string cast = "")
{
#>
        /// <summary>
        /// Adds a number of parameters to this collection
        /// </summary>
        /// <param name="collection"></param>
        public void AddRange(IEnumerable<<#= typename #>> collection)
        {
<#+
    if (cast == string.Empty) {
#>
            _params.AddRange(collection);
<#+
    } else {
#>
            foreach(<#= typename #> value in collection) {
                _params.Add(<#= cast.Trim() #>value);
            }
<#+
    }
#>
        }

        /// <summary>
        /// Adds a number of parameters to this collection
        /// </summary>
        /// <param name="collection"></param>
        public void AddRange(params <#= typename #>[] collection)
        {
<#+
    if (cast == string.Empty) {
#>
            _params.AddRange(collection);
<#+
    } else {
#>
            foreach(<#= typename #> value in collection) {
                _params.Add(<#= cast.Trim() #>value);
            }
<#+
    }
#>
        }
<#+
}

private void BuildSet(string typename, string cast = "")
{
#>
        /// <summary>
        /// Assigns a new value to a parameter at a given index
        /// </summary>
        /// <param name="index">The index of the argument</param>
        /// <param name="value">the new <#= typename #> data to assign</param>
        public void Set(int index, <#= typename #> value)
        {
            if ((uint)index >= (uint)_params.Count)
                throw new ArgumentOutOfRangeException(nameof(index));
            Contract.EndContractBlock();
            _params[index] = <#= cast #>value;
        }
<#+
}
#>